# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  foodsta-sam

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  VersionParam:
    Type: String
    Default: v1
  StageNameParam:
    Type: String
    Default: prod

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction

  # This is a Lambda function config associated with the source code: hello-from-lambda.js
  helloFromLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/hello-from-lambda.helloFromLambdaHandler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: A Lambda function that returns a static string.
      Policies:
        # Give Lambda basic execution Permission to the helloFromLambda
        - AWSLambdaBasicExecutionRole
  FoodstaUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolName: Foodsta-usrs
      UsernameAttributes:
      - email
      AutoVerifiedAttributes:
      - email
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: true
  FoodstaUserPoolTokenClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref FoodstaUserPool
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: ['code', 'implicit']
      CallbackURLs: ['http://localhost:19002' ,'https://localhost']
      SupportedIdentityProviders: ['COGNITO']
      AllowedOAuthScopes: ['phone', 'email', 'openid']
      ExplicitAuthFlows:
      - USER_PASSWORD_AUTH
  FoodstaPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      UserPoolName: Foodsta-users
      AliasAttributes: ['preferred_username']
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: true
  FoodstaPoolTokenClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref FoodstaPool
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: ['code', 'implicit']
      CallbackURLs: ['http://localhost:19002' ,'https://localhost']
      SupportedIdentityProviders: ['COGNITO']
      AllowedOAuthScopes: ['phone', 'email', 'openid']
      ExplicitAuthFlows: ['ALLOW_USER_PASSWORD_AUTH', 'ALLOW_REFRESH_TOKEN_AUTH', 'ALLOW_ADMIN_USER_PASSWORD_AUTH']
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'Foodsta-users'
      KeySchema:
          - AttributeName: cognito-username
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
      AttributeDefinitions:
          - AttributeName: cognito-username
            AttributeType: S
          - AttributeName: id
            AttributeType: S
      ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
  RecipeInformation:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'Foodsta-recipeInformation'
      KeySchema:
          - AttributeName: id
            KeyType: HASH
      AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
      ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
  PostsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'Foodsta-posts'
      KeySchema:
          - AttributeName: cognito-username
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
      AttributeDefinitions:
          - AttributeName: cognito-username
            AttributeType: S
          - AttributeName: id
            AttributeType: S
      ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
  CommentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'Foodsta-commentsTable'
      KeySchema:
          - AttributeName: cognito-username
            KeyType: HASH
          - AttributeName: commentId
            KeyType: RANGE
      AttributeDefinitions:
          - AttributeName: cognito-username
            AttributeType: S
          - AttributeName: commentId
            AttributeType: S
      ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
  # PostsApi:
  #   Type: AWS::Serverless::Api
  #   MethodSettings: 
  #       DataTraceEnabled: true
  #       MetricsEnabled: true
  #       HttpMethod: '*'
  #       ResourcePath: !Sub '${VersionParam}/*'
  #       LoggingLevel: INFO
  #   AccessLogSetting:
  #     DestinationArn: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:${ApiAccessLogGroup}'
  #     Format: '$context.identity.sourceIp $context.authorizer.claims.sub [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.requestId $context.awsEndpointRequestId $context.xrayTraceId $context.responseLatency $context.integrationLatency "$context.error.message"'
  #   Properties:
  #     Name: PostsApi
  #     StageName: !Ref StageNameParam
  #     TracingEnabled: true
  #     Cors:
  #       AllowOrigin: "'*'"
  #       AllowMethods: "'OPTIONS,HEAD,GET,PUT,POST,DELETE'"
  #       AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
  #     Auth:
  #       Authorizers:
  #         CognitoAuthorizer:
  #           UserPoolArn: !GetAtt "FoodstaUserPool.Arn"
  RecipesFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri: src/recipes
      Description: A simple function for UI to interact with recipe table.
      MemorySize: 128
      Timeout: 100
      Policies: [AmazonDynamoDBFullAccess, CloudWatchFullAccess, AWSLambdaBasicExecutionRole]
      Environment:
        Variables:
          TABLE_NAME: 'Recipes'
      Events:
        GetRecipe:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /recipes/{recipeId}
            Method: get
            # RestApiId: !Ref RecipesApi
            # Auth:
            #   Authorizer: CognitoAuthorizer
        GetRecipes:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /recipes/getAll
            Method: get
            # RestApiId: !Ref RecipesApi
            # Auth:
            #   Authorizer: CognitoAuthorizer
        GetRecipeByCuisine:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /recipes/cuisine/{cuisine}
            Method: get
            # RestApiId: !Ref RecipesApi
            # Auth:
            #   Authorizer: CognitoAuthorizer
        GetRecipeInformation:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /recipes/{recipeId}/information
            Method: get
            # RestApiId: !Ref RecipesApi
            # Auth:
            #   Authorizer: CognitoAuthorizer
        SaveRecipe:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /recipes/save
            Method: post
            # RestApiId: !Ref RecipesApi
            # Auth:
            #   Authorizer: CognitoAuthorizer
  PostsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri: src/posts
      Description: A simple function for UI to interact with recipe table.
      MemorySize: 128
      Timeout: 100
      Policies: [AmazonDynamoDBFullAccess, CloudWatchFullAccess, AWSLambdaBasicExecutionRole, AmazonS3FullAccess]
      Environment:
        Variables:
          TABLE_NAME: !Ref PostsTable
      Events:
        GetPost:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /posts/{username}
            Method: get
            # RestApiId: !Ref PostsApi
            # Auth:
            #   Authorizer: CognitoAuthorizer
        GetPosts:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /posts/getAll
            Method: get
            # RestApiId: !Ref PostsApi
            # Auth:
            #   Authorizer: CognitoAuthorizer
        CreatePost:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /posts/create
            Method: post
            # RestApiId: !Ref PostsApi
            # Auth:
            #   Authorizer: CognitoAuthorizer
        AddComment:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /posts/addComment
            Method: post
            # RestApiId: !Ref PostsApi
            # Auth:
            #   Authorizer: CognitoAuthorizer
        GetComments:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /posts/getComments
            Method: post
            # RestApiId: !Ref PostsApi
            # Auth:
            #   Authorizer: CognitoAuthorizer
  UsersFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: index.handler
      Runtime: nodejs14.x
      CodeUri: src/users/
      Description: A simple mobile backend (read/write to DynamoDB).
      MemorySize: 128
      Timeout: 100
      Policies: [AmazonDynamoDBFullAccess, CloudWatchFullAccess, AWSLambdaBasicExecutionRole, AmazonCognitoPowerUser, AmazonS3FullAccess]
      Events:
        GetUser:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /users/{userName}
            Method: get
        DeleteUser:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /users/delete
            Method: delete
        CreateUsers:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /users/create
            Method: post
        AuthenticateUser:
          Type: Api
          Properties:
              Path: /users/auth
              Method: post
        GetProfilePicture:
          Type: Api
          Properties:
            Path: /users/profilePicture/{username}
            Method: get
  ApiGatewayPushToCloudWatchRole:
    Type: "AWS::IAM::Role"
    Properties:
      Description: "Push logs to CloudWatch logs from API Gateway"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
Outputs:
  # PostsApi:
  #   Description: API Gateway endpoint URL for Prod stage
  #   Value: !Sub "https://${PostsApi}.execute-api.${AWS::Region}.amazonaws.com/{StageNameParam}"
  CognitoID:
    Description: The Cognito UserPool ID
    Value: !Ref FoodstaPool
  CognitoClientID:
    Description: The Cognito UserPool Client ID
    Value: !Ref FoodstaPoolTokenClient